## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
# holds the cached value or NULL if nothing is cached
# initially nothing is cached so set it to NULL
cache <- NULL
# store a matrix
setMatrix <- function(newValue) {
x <<- newValue
# since the matrix is assigned a new value, flush the cache
cache <<- NULL
}
# returns the stored matrix
getMatrix <- function() {
x
}
# cache the given argument
cacheInverse <- function(solve) {
cache <<- solve
}
# get the cached value
getInverse <- function() {
cache
}
# return a list. Each named element of the list is a function
list(setMatrix = setMatrix, getMatrix = getMatrix, cacheInverse = cacheInverse, getInverse = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(y, ...) {
## Return a matrix that is the inverse of 'x'
# get the cached value
inverse <- y$getInverse()
# if a cached value exists return it
if(!is.null(inverse)) {
message("getting cached data")
return(inverse)
}
# otherwise get the matrix, caclulate the inverse and store it in
# the cache
data <- y$getMatrix()
inverse <- solve(data)
y$cacheInverse(inverse)
# return the inverse
inverse
}
cacheSolve(mat)
solve(x)
y<-cbind(1:3,c(2,3,2),3:1)
maty<-makeCacheMatrix(y)
cacheSolve(maty)
solve(y)
cacheSolve(mat)
cacheSolve(maty)
?opts_chunk$set
opts_chunk$set
library(knitr)
?opts_chunk$set
?opts_chunk
act<-read.csv("activity.csv")
## Histogram, mean and median
dailysteps<-tapply(act$steps,act$date,sum,na.rm=TRUE)
table(dailysteps)
hist(dailysteps,col="green",breaks=c(5000,10000))
hist(dailysteps,col="green",breaks=c(5000,10000,15000,20000,25000))
hist(dailysteps,col="green",breaks=c(0,5000,10000,15000,20000,25000))
hist(dailysteps,col="green",breaks=seq(0,25000,40))
hist(dailysteps,col="green",breaks=seq(0,25000,41))
seq(0,25000,41)
hist(dailysteps,col="green",breaks=seq(0,25000,5441))
options(scipen)
getoptions("scipen")
getOptions("scipen")
getOption("scipen")
options(scipen = 3); print(1e5)
options(scipen = 0); print(1e5)
options(scipen = 1); print(1e5)
options(scipen = 1)
ls
ls()
dir()
ls()
str(storm)
?stat_function
library(ggplot2)
?stat_function
expdistr<-rexp(1000,lambda)
lambda<-0.2
expdistr<-rexp(1000,lambda)
hist(expdistr)
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
table(ToothGrowth$dose)
?attach
attach(ToothGrowth)
table(dose)
boxplot(supp,len)
boxplot(dose,len)
boxplot(len,supp)
boxplot(len,dose)
boxplot(len~dose)
boxplot(len~supp)
plot(len)
hist(len)
hist(len,breaks=20)
hist(len)
t.test(len~I(relevel(supp,2)))
boxplot(len~supp)
t.test(len~I(relevel(dose,2)))
boxplot(len~dose)
detach(ToothGrowth)
table(dose)
str(ToothGrowth)
level(ToothGrowth$supp)
levels(ToothGrowth$supp)
t.test(len~I(relevel(supp,2)))
t.test(len~I(relevel(supp,2)),data=ToothGrowth)
boxplot(len~supp,data=ToothGrowth)
t.test(len~I(relevel(supp,"VC")),data=ToothGrowth)
t.test(len~I(relevel(supp,"OJ")),data=ToothGrowth)
t.test(len~I(relevel(supp,"OJ")),alternative="greater",data=ToothGrowth)
boxplot(len~dose,data=ToothGrowth)
compare<-ToothGrowth[ToothGrowth$dose %in% c(0.5,1),]
t.test(len~I(relevel(dose,1)),data=compare)
t.test(len~I(relevel(as.factor(dose),1)),data=compare)
t.test(len~I(relevel(as.factor(dose),0.5)),data=compare)
t.test(len~I(relevel(as.factor(dose),"0.5")),data=compare)
t.test(len~I(relevel(as.factor(dose),"0.5")),alternative="less",data=compare)
compare<-ToothGrowth[ToothGrowth$dose %in% c(1,2),]
t.test(len~I(relevel(as.factor(dose),"1")),alternative="less",data=compare)
boxplot(len~dose,data=ToothGrowth, xlab="Dose Supplement")
boxplot(len~supp,data=ToothGrowth,xlab="Supplement",ylab="Tooth Growth",main="Tooth Growth by Supplement")
hist(len,data=ToothGrowth,main="Histogram of Tooth Growth")
hist(len,data=ToothGrowth)
hist(ToothGrowth$len,main="Histogram of Tooth Growth")
hist(ToothGrowth$len,xlab="Tooth Growth",main="Histogram of Tooth Growth")
lambda<-0.2
simdata<-NULL
for (i in 1:1000) simdata<-c(simdata,mean(rexp(40,lambda)))
mean(simdata)
var(simdata)
hist(simdata)
5/sqrt(1000)
25/1000
xvals<-seq(2,8,length=1000)
y<-dnorm(xvals,mean(simdata),sd(simdata))
head(y)
lines(xvals,dnorm(xvals,mean(simdata),sd(simdata)))
lines(xvals,1000*dnorm(xvals,mean(simdata),sd(simdata)))
lines(xvals,250*dnorm(xvals,mean(simdata),sd(simdata)))
length(simdata)
lines(xvals,500*dnorm(xvals,mean(simdata),sd(simdata)))
hist(simdata)
lines(xvals,500*dnorm(xvals,mean(simdata),sd(simdata)),col=2)
hist(simdata, main="Histogram of the Averages of 40 Exponentials")
hist(simdata, main="Histogram of the Averages of Exponentials")
lines(xvals,500*dnorm(xvals,mean(simdata),sd(simdata)),col=2)
attach(ToothGrowth)
hist(len[dose=0.5,])
hist(len[dose==0.5,])
str(ToothGrowth)
hist(len[dose==0.5])
hist(len[dose==1])
hist(len[dose==2])
compare<-ToothGrowth[dose %in% c(0.5,1),]
t.test(len~I(relevel(as.factor(dose),"0.5")),alternative="less",data=compare)
compare<-ToothGrowth[dose %in% c(2,1),]
t.test(len~I(relevel(as.factor(dose),"1")),alternative="less",data=compare)
length(dose)
length(compare$dose)
op<-par(mfrow=c(1,3))
hist(len[dose==0.5])
hist(len[dose==1])
hist(len[dose==2])
par(op)
op<-par(mfrow=c(1,3))
hist(len[dose==0.5],xlab="dose=0.5",main="")
hist(len[dose==1],xlab="dose=1",main="Histogram of Tooth Growth by Dose")
hist(len[dose==2],xlab="dose=2",main="")
par(op)
op<-par(mfrow=c(1,2))
hist(len[supp="OJ"],xlab="",main="")
hist(len[supp="VC"],xlab="",main="")
par(op)
title("Histogram of Tooth Growth by Supplement")
op<-par(mfrow=c(1,2))
hist(len[supp=1],xlab="",main="")
hist(len[supp=2],xlab="",main="")
par(op)
title("Histogram of Tooth Growth by Supplement")
levels(supp[supp==1])
tables(supp)
table(supp)
head(supp[supp==1])
head(supp[supp==2])
supp[supp==2]
head(supp[supp=="VC"])
op<-par(mfrow=c(1,2))
hist(len[supp=="OJ"],xlab="Orange Juice",main="")
hist(len[supp=="VC"],xlab="Vitamin C",main="")
par(op)
title("Histogram of Tooth Growth by Supplement")
op<-par(mfrow=c(1,3))
hist(len[dose==0.5],xlab="dose=0.5",main="")
hist(len[dose==1],xlab="dose=1",main="")
hist(len[dose==2],xlab="dose=2",main="")
par(op)
title("Histogram of Tooth Growth by Supplement Dose")
boxplot(len~supp,xlab="Supplement",ylab="Tooth Growth",main="Tooth Growth by Supplement")
boxplot(len~dose,xlab="Dose Supplement",ylab="Tooth Growth",main="Tooth Growth by Dose Supplement")
t.test(len~I(relevel(supp,"OJ")),alternative="greater")
summary(ToothGrowth)
table(dose)
boxplot(len~supp,xlab="Supplement",ylab="Tooth Growth",main="Tooth Growth by Supplement")
boxplot(len~dose,xlab="Supplement Dose",ylab="Tooth Growth",main="Tooth Growth by Supplement Dose")
hist(len,xlab="Tooth Growth",main="Histogram of Tooth Growth")
t.test(len~I(relevel(supp,"OJ")),alternative="greater")
ttest<-t.test(len~I(relevel(supp,"OJ")),alternative="greater")
ttest
str(test)
str(ttest)
ttest$p.value
ttest$conf.int
ttest$conf.int[1]
(ttest$conf.int[1],ttest$conf.int[2])
ttest
---
a
ttest$conf.int[2]
boxplot(len~dose,xlab="Supplement Dose",ylab="Tooth Growth",main="Tooth Growth by Supplement Dose")
ttest<-t.test(len~I(relevel(as.factor(dose),"0.5")),alternative="less",data=compare)
attach(ToothGrowth)
data(ToothGrowth)
attach(ToothGrowth)
lambda<-0.2
simdata<-NULL
for (i in 1:1000) simdata<-c(simdata,mean(rexp(40,lambda)))
mean(simdata)
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean)
abline(v=5,col="red")
mean<-mean(simdata)
abline(v=mean)
abline(v=mean,col="green")
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean,col="green")
abline(v=5,col="red")
var(simdata)
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),col="green")
abline(v=mean+sd(simdata),col="green")
abline(v=5-sqrt(5),col="red")
abline(v=5+sqrt(5),col="red")
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),lty=2,col="green")
abline(v=mean+sd(simdata),lty=2,col="green")
abline(v=5-sqrt(5),lty=2,col="red")
abline(v=5+sqrt(5),lty=2,col="red")
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),lty=2,col="green")
abline(v=mean+sd(simdata),lty=2,col="green")
abline(v=5-sqrt(5),lty=3,col="red")
abline(v=5+sqrt(5),lty=3,col="red")
lambda<-0.2
simdata<-NULL
for (i in 1:1000) simdata<-c(simdata,mean(rexp(40,lambda)))
mean<-mean(simdata)
mean
var<-var(simdata)
var
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),lty=2,col="green")
abline(v=mean+sd(simdata),lty=2,col="green")
abline(v=5-sqrt(5),lty=3,col="red")
abline(v=5+sqrt(5),lty=3,col="red")
hist(simdata,xlim=c(2,9),xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
range(simdata)
min(simdata)
max(simdata)
hist(simdata,xlim=c(min(c(simdata,2)),max(c(simdata,8))),xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),lty=2,col="green")
abline(v=mean+sd(simdata),lty=2,col="green")
abline(v=5-sqrt(5),lty=3,col="red")
abline(v=5+sqrt(5),lty=3,col="red")
sqrt(5)
5-sqrt(5)
5+sqrt(5)
hist(simdata,xlim=c(min(c(simdata,2.7)),max(c(simdata,7.3))),xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),lty=2,col="green")
abline(v=mean+sd(simdata),lty=2,col="green")
abline(v=5-sqrt(5),lty=3,col="red")
abline(v=5+sqrt(5),lty=3,col="red")
storm<-read.csv("StormData.csv")
storm$DMG<-storm$PROPDMG+storm$CROPDMG
death<-tapply(storm$FATALITIES,storm$EVTYPE,mean)
injury<-tapply(storm$INJURIES,storm$EVTYPE,mean)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,mean)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,mean)
dmg<-tapply(storm$DMG,storm$EVTYPE,mean)
hist(death,breaks=100,xlab="Fatalities",main="Histogram of Fatalities")
hist(dmg,breaks=100,xlab="Total Damages",main="Histogram of Total Damages")
eath<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
injury<-tapply(storm$INJURIES,storm$EVTYPE,sum)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,sum)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,sum)
dmg<-tapply(storm$DMG,storm$EVTYPE,sum)
head(sort(death,decreasing=T))
head(sort(injury,decreasing=T))
eath<-tapply(storm$FATALITIES,storm$EVTYPE,mean)
injury<-tapply(storm$INJURIES,storm$EVTYPE,mean)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,mean)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,mean)
dmg<-tapply(storm$DMG,storm$EVTYPE,mean)
head(sort(death,decreasing=T))
head(sort(injury,decreasing=T))
head(sort(propdmg,decreasing=T))
head(sort(cropdmg,decreasing=T))
head(sort(dmg,decreasing=T))
death<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
injury<-tapply(storm$INJURIES,storm$EVTYPE,sum)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,sum)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,sum)
dmg<-tapply(storm$DMG,storm$EVTYPE,sum)
head(sort(death,decreasing=T))
head(sort(injury,decreasing=T))
head(sort(propdmg,decreasing=T))
head(sort(cropdmg,decreasing=T))
head(sort(dmg,decreasing=T))
hist(death,breaks=100,xlab="Fatalities",main="Histogram of Fatalities")
death<-tapply(storm$FATALITIES,storm$EVTYPE,mean)
injury<-tapply(storm$INJURIES,storm$EVTYPE,mean)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,mean)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,mean)
dmg<-tapply(storm$DMG,storm$EVTYPE,mean)
head(sort(death,decreasing=T))
head(sort(injury,decreasing=T))
hist(death,breaks=100,xlab="Fatalities",main="Histogram of Fatalities")
hist(dmg,breaks=100,xlab="Total Damages",main="Histogram of Total Damages")
head(sort(dmg,decreasing=T))
names(storm$EVTYPE)
head(storm$EVTYPE)
str(storm$EVTYPE)
levels(storm$EVTYPE)
unzip(repdata_data_StormData.csv.bz2)
unzip("repdata_data_StormData.csv.bz2")
storm<- read.csv(bzfile("repdata_data_StormData.csv.bz2"))
death<-tapply(storm$FATALITIES,storm$EVTYPE,mean)
injury<-tapply(storm$INJURIES,storm$EVTYPE,mean)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,mean)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,mean)
dmg<-tapply(storm$DMG,storm$EVTYPE,mean)
death<-tapply(storm$FATALITIES,storm$EVTYPE,mean)
injury<-tapply(storm$INJURIES,storm$EVTYPE,mean)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,mean)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,mean)
storm$DMG<-storm$PROPDMG+storm$CROPDMG
dmg<-tapply(storm$DMG,storm$EVTYPE,mean)
head(sort(death,decreasing=T))
plot(sort(death,decreasing=T))
death<-sort(death,decreasing=T)
str(death)
event<-dimnames(death)[[1]]
plot(event,death)
head(event)
plot(sort(death,decreasing=T))
plot(sort(dmg,decreasing=T))
plot(sort(death,decreasing=T),xlab="Event Type Index",ylab="Fatalities",main="Comparison of Fatalities Caused by Types of Event")
death<-tapply(storm$FATALITIES,storm$EVTYPE,mean)
injury<-tapply(storm$INJURIES,storm$EVTYPE,mean)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,mean)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,mean)
dmg<-tapply(storm$DMG,storm$EVTYPE,mean)
head(sort(death,decreasing=T))
head(sort(death,decreasing=T),10)
head(sort(death,decreasing=T),20)
head(sort(death,decreasing=T),40)
tail(sort(death,decreasing=T),40)
length(death[death==1])
head(sort(death,decreasing=T),30)
length(death[death>0])
head(sort(death,decreasing=T),25)
head(sort(death,decreasing=T),24)
death<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
injury<-tapply(storm$INJURIES,storm$EVTYPE,sum)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,sum)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,sum)
dmg<-tapply(storm$DMG,storm$EVTYPE,sum)
plot(sort(death,decreasing=T),xlab="Event Type Index",ylab="Fatalities",main="Comparison of Fatalities Caused by Types of Event")
plot(sort(dmg,decreasing=T),xlab="Event Type Index",ylab="Total Damages",main="Comparison of Total Damages Caused by Types of Event")
length(death[death>0])
death<-tapply(storm$FATALITIES,storm$EVTYPE,sum)
injury<-tapply(storm$INJURIES,storm$EVTYPE,sum)
propdmg<-tapply(storm$PROPDMG,storm$EVTYPE,sum)
cropdmg<-tapply(storm$CROPDMG,storm$EVTYPE,sum)
dmg<-tapply(storm$DMG,storm$EVTYPE,sum)
length(death[death>0])
length(dmg[death>0])
length(dmg[dmg>0])
plot(sort(death[death>0],decreasing=T),xlab="Index for Types of Events With Nonzero Fatalities",ylab="Fatalities",main="Comparison of Fatalities Caused by Types of Event")
plot(sort(dmg[dmg>0],decreasing=T),xlab="Index for Types of Events With Nonzero Total Damages",ylab="Total Damages",main="Comparison of Total Damages Caused by Types of Event")
lambda<-0.2
simdata<-NULL
for (i in 1:1000) simdata<-c(simdata,mean(rexp(40,lambda)))
mean<-mean(simdata)
mean
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean,col="green")
abline(v=5,col="red")
hist(simdata,xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean,col="green")
abline(v=5,col="red")
var<-var(simdata)
var
hist(simdata,xlim=c(min(c(simdata,2.7)),max(c(simdata,7.3))),xlab="Averages of Exponentials",main="Histogram of Averages of Exponentials")
abline(v=mean-sd(simdata),lty=2,col="green")
abline(v=mean+sd(simdata),lty=2,col="green")
abline(v=5-sqrt(5),lty=3,col="red")
abline(v=5+sqrt(5),lty=3,col="red")
expdistr<-rexp(1000,lambda)
hist(expdistr,main="Histogram of Exponentials")
xvals<-seq(2,8,length=1000)
hist(simdata, main="Histogram of the Averages of Exponentials")
lines(xvals,500*dnorm(xvals,mean(simdata),sd(simdata)),col=2)
act<-read.csv("activity.csv")
attach(act)
dailysteps<-tapply(steps,date,sum,na.rm=TRUE)
hist(dailysteps,col="green")
data("activity.csv")
act<-data("activity.csv")
head(act)
str(act)
act<-read.csv("activity.csv")
str(act)
data()
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
library(rCharts)
install.packages("rCharts")
install.packages("rCharts")
require(devtools)
install_github('rCharts', 'ramnathv')
require(rCharts)
str(airquality)
dTable(airquality, sPaginationType = "full_numbers")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE); print(d)
library(slidify)
getwd()
library(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
str(mtcars)
library(help = "datasets")
library(help = "datasets")
lm(mpg~.,data=mtcars)
summary(lm(mpg~.,data=mtcars))$coef
summary(lm(mpg~wt,data=mtcars))$coef
summary(lm(mpg~wt+am,data=mtcars))$coef
summary(lm(mpg~wt+qsec,data=mtcars))$coef
summary(lm(mpg~wt+hp,data=mtcars))$coef
summary(lm(mpg~wt+qsec+hp,data=mtcars))$coef
summary(lm(mpg~wt+qsec+disp,data=mtcars))$coef
summary(lm(mpg~wt,data=mtcars))$coef
coef(lm(mpg~wt,data=mtcars))
fit<-lm(mpg~wt,data=mtcars)
predict(fit, 3, interval = ("prediction"))
newdata<-data.frame(wt=3)
predict(fit, newdata, interval = ("prediction"))
x<-3000
newdata<-data.frame(wt=x/1000)
predict(fit, newdata, interval = ("prediction"))
newdata<-data.frame(y=x/1000)
predict(fit, newdata, interval = ("prediction"))
newdata<-data.frame(wt=x/1000)
predict(fit, newdata)
round(predict(fit, newdata))
round(predict(fit, newdata),1)
wt<-3000
round(37.285126-5.344472*wt/1000,1)
x
newdata<-data.frame(wt=x/1000)
round(predict(fit, newdata),1)
fit<-lm(mpg~wt,data=mtcars)
fit<-lm(mpg~I(1/wt),data=mtcars)
fit
x<-3000
newdata<-data.frame(wt=x/1000)
round(predict(fit, newdata),1)
round(4.386+45.829*1000/x,1)
summary(fit)
head(mpg)
head(mtcars)
summary(mtcars)
fit<-lm(mpg~I(1/wt/1000),data=mtcars)
summary(fit)$coef
newdata<-data.frame(wt=x/1000)
round(predict(fit, newdata),1)
round(4.386254+45829.487538/x,1)
summary(fit)
round(4.386+45829.488/x,1)
x<-2000
round(4.386+45829.488/x,1)
setwd("C:\\Users\\Wei\\Documents\\Git\\mpgpred_pitch")
library(slidify)
publish(user="shuai114",repo="SlidifyPresentation")
publish(user="shuai114",repo="SlidifyPresentation.git")
publish(user="shuai114",repo="SlidifyPresentation")
publish(user="www",repo="shuai114/SlidifyPresentation")
